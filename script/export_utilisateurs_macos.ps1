#Requires -Version 7.0

<#
.SYNOPSIS
    Script pour exporter la liste compl√®te des utilisateurs Microsoft Graph avec leurs informations d√©taill√©es.
    Version optimis√©e pour macOS.

.DESCRIPTION
    Ce script se connecte √† Microsoft Graph et r√©cup√®re tous les utilisateurs avec leurs informations :
    - Nom et pr√©nom
    - D√©partement
    - Poste/Titre
    - Email
    - Statut du compte
    - Date de cr√©ation

    Les donn√©es sont export√©es dans un fichier texte format√© et un fichier CSV.

.PARAMETER OutputPath
    Chemin de sortie pour les fichiers g√©n√©r√©s (par d√©faut : r√©pertoire courant)

.PARAMETER IncludeDisabled
    Inclure les comptes d√©sactiv√©s dans l'export (par d√©faut : false)

.PARAMETER IncludeSharedMailboxes
    Inclure les bo√Ætes partag√©es dans l'export (par d√©faut : false - les bo√Ætes partag√©es sont exclues)

.EXAMPLE
    .\export_utilisateurs_macos.ps1

.EXAMPLE
    .\export_utilisateurs_macos.ps1 -IncludeDisabled

.EXAMPLE
    .\export_utilisateurs_macos.ps1 -IncludeSharedMailboxes

.NOTES
    Auteur: Assistant IA
    Version: 1.0 - macOS Compatible
    Date: $(Get-Date -Format "yyyy-MM-dd")
    
    Pr√©requis:
    - Module Microsoft.Graph
    - Connexion administrateur Microsoft 365
    - PowerShell Core 7.0+ (recommand√© sur macOS)
#>

param(
    [string]$OutputPath = ".",
    [switch]$IncludeDisabled = $false,
    [switch]$IncludeSharedMailboxes = $false
)

# Configuration des couleurs pour les messages
$Colors = @{
    Success = "Green"
    Warning = "Yellow"
    Error = "Red"
    Info = "Cyan"
    Header = "Magenta"
}

function Write-ColorOutput {
    param(
        [string]$Message,
        [string]$Color = "White"
    )
    Write-Host $Message -ForegroundColor $Color
}

function Test-MicrosoftGraphConnection {
    try {
        # V√©rifier si on est connect√© √† Microsoft Graph
        $context = Get-MgContext -ErrorAction Stop
        return ($context -ne $null)
    }
    catch {
        return $false
    }
}

function Connect-ToMicrosoftGraph {
    Write-ColorOutput "üîê Connexion √† Microsoft Graph..." $Colors.Info
    
    try {
        # Se connecter √† Microsoft Graph avec les permissions n√©cessaires
        Connect-MgGraph -Scopes "User.Read.All", "Directory.Read.All" -NoWelcome
        Write-ColorOutput "‚úÖ Connexion r√©ussie √† Microsoft Graph" $Colors.Success
        return $true
    }
    catch {
        Write-ColorOutput "‚ùå Erreur de connexion √† Microsoft Graph : $($_.Exception.Message)" $Colors.Error
        Write-ColorOutput "üí° Assurez-vous d'avoir install√© le module Microsoft.Graph et d'avoir les permissions n√©cessaires" $Colors.Warning
        return $false
    }
}

function Get-AllUsers {
    param(
        [bool]$IncludeDisabledUsers
    )
    
    Write-ColorOutput "üìä R√©cup√©ration de la liste des utilisateurs..." $Colors.Info
    
    try {
        # R√©cup√©rer tous les utilisateurs avec Microsoft Graph
        $users = @()
        $pageSize = 999
        $skipToken = $null
        
        do {
            $params = @{
                All = $true
                PageSize = $pageSize
                Property = @(
                    "id", "displayName", "givenName", "surname", "userPrincipalName",
                    "department", "jobTitle", "accountEnabled", "createdDateTime",
                    "userType", "mail"
                )
            }
            
            if ($skipToken) {
                $params.SkipToken = $skipToken
            }
            
            $result = Get-MgUser @params
            
            if ($result) {
                $users += $result
                $skipToken = $result | Select-Object -Last 1 | ForEach-Object { $_.AdditionalProperties.'@odata.nextLink' }
            }
        } while ($skipToken)
        
        # Filtrer les utilisateurs selon les crit√®res
        if ($IncludeSharedMailboxes) {
            # Inclure tous les utilisateurs (y compris les bo√Ætes partag√©es)
            $filteredUsers = $users | Where-Object {
                $_.UserType -eq "Member" -and 
                $_.UserPrincipalName -notlike "*#EXT#*" -and
                ($IncludeDisabledUsers -or $_.AccountEnabled -eq $true)
            }
            Write-ColorOutput "üìã Mode : Inclure les bo√Ætes partag√©es" $Colors.Info
        } else {
            # Exclure les bo√Ætes partag√©es (mode par d√©faut)
            $filteredUsers = $users | Where-Object {
                $_.UserType -eq "Member" -and 
                $_.UserPrincipalName -notlike "*#EXT#*" -and
                $_.UserPrincipalName -notlike "*_*" -and  # Exclure les comptes avec underscore (souvent des bo√Ætes partag√©es)
                $_.DisplayName -notlike "*partag√©*" -and  # Exclure les comptes avec "partag√©" dans le nom
                $_.DisplayName -notlike "*shared*" -and   # Exclure les comptes avec "shared" dans le nom
                $_.DisplayName -notlike "*mailbox*" -and  # Exclure les comptes avec "mailbox" dans le nom
                $_.DisplayName -notlike "*boite*" -and    # Exclure les comptes avec "boite" dans le nom
                $_.DisplayName -notlike "*box*" -and      # Exclure les comptes avec "box" dans le nom
                $_.JobTitle -notlike "*partag√©*" -and     # Exclure les postes avec "partag√©"
                $_.JobTitle -notlike "*shared*" -and      # Exclure les postes avec "shared"
                $_.JobTitle -notlike "*mailbox*" -and     # Exclure les postes avec "mailbox"
                $_.Department -notlike "*partag√©*" -and   # Exclure les d√©partements avec "partag√©"
                $_.Department -notlike "*shared*" -and    # Exclure les d√©partements avec "shared"
                $_.Department -notlike "*mailbox*" -and   # Exclure les d√©partements avec "mailbox"
                ($IncludeDisabledUsers -or $_.AccountEnabled -eq $true)
            }
            Write-ColorOutput "üìã Mode : Exclure les bo√Ætes partag√©es" $Colors.Info
        }
        
        Write-ColorOutput "‚úÖ $($filteredUsers.Count) utilisateurs r√©cup√©r√©s" $Colors.Success
        return $filteredUsers
    }
    catch {
        Write-ColorOutput "‚ùå Erreur lors de la r√©cup√©ration des utilisateurs : $($_.Exception.Message)" $Colors.Error
        return @()
    }
}

function Format-UserData {
    param(
        [array]$Users
    )
    
    Write-ColorOutput "üîÑ Formatage des donn√©es utilisateurs..." $Colors.Info
    
    $formattedUsers = @()
    $totalUsers = $Users.Count
    $currentUser = 0
    
    foreach ($user in $Users) {
        $currentUser++
        $progress = [math]::Round(($currentUser / $totalUsers) * 100, 1)
        Write-Progress -Activity "Formatage des donn√©es" -Status "Utilisateur $currentUser sur $totalUsers" -PercentComplete $progress
        
        # Extraire les informations
        $firstName = if ($user.GivenName) { $user.GivenName.Trim() } else { "Non renseign√©" }
        $lastName = if ($user.Surname) { $user.Surname.Trim() } else { "Non renseign√©" }
        $department = if ($user.Department) { $user.Department.Trim() } else { "Non renseign√©" }
        $jobTitle = if ($user.JobTitle) { $user.JobTitle.Trim() } else { "Non renseign√©" }
        $email = if ($user.Mail) { $user.Mail.Trim() } elseif ($user.UserPrincipalName) { $user.UserPrincipalName.Trim() } else { "Non renseign√©" }
        $displayName = if ($user.DisplayName) { $user.DisplayName.Trim() } else { "Non renseign√©" }
        $accountStatus = if ($user.AccountEnabled) { "Actif" } else { "D√©sactiv√©" }
        $createdDate = if ($user.CreatedDateTime) { 
            $user.CreatedDateTime.ToString("dd/MM/yyyy") 
        } else { 
            "Date inconnue" 
        }
        
        $formattedUsers += [PSCustomObject]@{
            Nom = $lastName
            Prenom = $firstName
            NomComplet = $displayName
            Email = $email
            Departement = $department
            Poste = $jobTitle
            Statut = $accountStatus
            DateCreation = $createdDate
        }
    }
    
    Write-Progress -Activity "Formatage des donn√©es" -Completed
    return $formattedUsers
}

function Export-ToTextFile {
    param(
        [array]$Users,
        [string]$FilePath
    )
    
    Write-ColorOutput "üìù G√©n√©ration du fichier texte..." $Colors.Info
    
    try {
        $content = @()
        $content += "=" * 80
        $content += "RAPPORT DES UTILISATEURS MICROSOFT GRAPH"
        $content += "G√©n√©r√© le : $(Get-Date -Format 'dd/MM/yyyy √† HH:mm:ss')"
        $content += "Total d'utilisateurs : $($Users.Count)"
        $content += "=" * 80
        $content += ""
        
        # Grouper par d√©partement
        $usersByDepartment = $Users | Group-Object -Property Departement | Sort-Object Name
        
        foreach ($department in $usersByDepartment) {
            $deptName = if ($department.Name -eq "Non renseign√©") { "D√©partement non renseign√©" } else { $department.Name }
            
            $content += "üìÅ $deptName ($($department.Count) utilisateur(s))"
            $content += "-" * 60
            
            foreach ($user in $department.Group | Sort-Object Nom, Prenom) {
                $content += "üë§ $($user.Prenom) $($user.Nom)"
                $content += "   üìß Email: $($user.Email)"
                $content += "   üíº Poste: $($user.Poste)"
                $content += "   üìä Statut: $($user.Statut)"
                $content += ""
            }
            $content += ""
        }
        
        # Statistiques
        $content += "=" * 80
        $content += "STATISTIQUES"
        $content += "=" * 80
        $content += "Total d'utilisateurs: $($Users.Count)"
        $content += "Utilisateurs actifs: $(($Users | Where-Object { $_.Statut -eq 'Actif' }).Count)"
        $content += "Utilisateurs d√©sactiv√©s: $(($Users | Where-Object { $_.Statut -eq 'D√©sactiv√©' }).Count)"
        $content += "D√©partements: $($usersByDepartment.Count)"
        $content += ""
        
        # Top 5 des d√©partements
        $content += "Top 5 des d√©partements:"
        $topDepartments = $usersByDepartment | Sort-Object Count -Descending | Select-Object -First 5
        foreach ($dept in $topDepartments) {
            $deptName = if ($dept.Name -eq "Non renseign√©") { "Non renseign√©" } else { $dept.Name }
            $content += "  ‚Ä¢ $deptName : $($dept.Count) utilisateur(s)"
        }
        
        # √âcrire le fichier
        $content | Out-File -FilePath $FilePath -Encoding UTF8
        Write-ColorOutput "‚úÖ Fichier texte g√©n√©r√© : $FilePath" $Colors.Success
    }
    catch {
        Write-ColorOutput "‚ùå Erreur lors de la g√©n√©ration du fichier texte : $($_.Exception.Message)" $Colors.Error
    }
}

function Export-ToCSVFile {
    param(
        [array]$Users,
        [string]$FilePath
    )
    
    Write-ColorOutput "üìä G√©n√©ration du fichier CSV..." $Colors.Info
    
    try {
        $Users | Export-Csv -Path $FilePath -NoTypeInformation -Encoding UTF8
        Write-ColorOutput "‚úÖ Fichier CSV g√©n√©r√© : $FilePath" $Colors.Success
    }
    catch {
        Write-ColorOutput "‚ùå Erreur lors de la g√©n√©ration du fichier CSV : $($_.Exception.Message)" $Colors.Error
    }
}

# Script principal
function Main {
    Write-ColorOutput "üöÄ D√âMARRAGE DU SCRIPT D'EXPORT DES UTILISATEURS (macOS)" $Colors.Header
    Write-ColorOutput ("=" * 60) $Colors.Header
    
    # Importer le module Microsoft.Graph
    try {
        Import-Module Microsoft.Graph.Users -Force
        Write-ColorOutput "‚úÖ Module Microsoft.Graph import√© avec succ√®s" $Colors.Success
    }
    catch {
        Write-ColorOutput "‚ùå Erreur lors de l'import du module Microsoft.Graph : $($_.Exception.Message)" $Colors.Error
        Write-ColorOutput "üí° Ex√©cutez d'abord : pwsh -Command 'Install-Module Microsoft.Graph -Scope CurrentUser'" $Colors.Warning
        exit 1
    }
    
    # V√©rifier la connexion Microsoft Graph
    if (-not (Test-MicrosoftGraphConnection)) {
        if (-not (Connect-ToMicrosoftGraph)) {
            Write-ColorOutput "‚ùå Impossible de se connecter √† Microsoft Graph. Arr√™t du script." $Colors.Error
            exit 1
        }
    } else {
        Write-ColorOutput "‚úÖ D√©j√† connect√© √† Microsoft Graph" $Colors.Success
    }
    
    # R√©cup√©rer les utilisateurs
    $users = Get-AllUsers -IncludeDisabledUsers $IncludeDisabled
    
    if ($users.Count -eq 0) {
        Write-ColorOutput "‚ùå Aucun utilisateur trouv√©. Arr√™t du script." $Colors.Error
        exit 1
    }
    
    # Formater les donn√©es
    $formattedUsers = Format-UserData -Users $users
    
    # G√©n√©rer les noms de fichiers
    $timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
    $textFile = Join-Path $OutputPath "Utilisateurs_Graph_$timestamp.txt"
    $csvFile = Join-Path $OutputPath "Utilisateurs_Graph_$timestamp.csv"
    
    # Exporter les donn√©es
    Export-ToTextFile -Users $formattedUsers -FilePath $textFile
    Export-ToCSVFile -Users $formattedUsers -FilePath $csvFile
    
    # R√©sum√© final
    Write-ColorOutput "" $Colors.Info
    Write-ColorOutput ("=" * 60) $Colors.Header
    Write-ColorOutput "‚úÖ EXPORT TERMIN√â AVEC SUCC√àS" $Colors.Success
    Write-ColorOutput ("=" * 60) $Colors.Header
    Write-ColorOutput "üìä Utilisateurs export√©s : $($formattedUsers.Count)" $Colors.Info
    Write-ColorOutput "üìù Fichier texte : $textFile" $Colors.Info
    Write-ColorOutput "üìä Fichier CSV : $csvFile" $Colors.Info
    Write-ColorOutput "" $Colors.Info
    
    # D√©connexion
    try {
        Disconnect-MgGraph | Out-Null
        Write-ColorOutput "üîê D√©connexion de Microsoft Graph r√©ussie" $Colors.Success
    }
    catch {
        Write-ColorOutput "‚ö†Ô∏è Erreur lors de la d√©connexion de Microsoft Graph" $Colors.Warning
    }
}

# Gestion des erreurs globales
trap {
    Write-ColorOutput "‚ùå Erreur inattendue : $($_.Exception.Message)" $Colors.Error
    Write-ColorOutput "üìç Ligne : $($_.InvocationInfo.ScriptLineNumber)" $Colors.Error
    
    # Tentative de d√©connexion en cas d'erreur
    try {
        Disconnect-MgGraph | Out-Null
    }
    catch {
        # Ignorer les erreurs de d√©connexion
    }
    
    exit 1
}

# Ex√©cution du script principal
Main
